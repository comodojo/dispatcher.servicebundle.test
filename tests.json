{
	"test_httpmethods": {
		"name": "HTTP methods",
		"description": "This test simply launch GET, PUT, POST and DELETE requests",
		"type": "multicall",
		"tests": [
			{
				"send": {
					"method": "GET",
					"content": {
						"this": "is",
						"a": "test"
					}
				}
			},
			{
				"send": {
					"method": "PUT"
				}
			},
			{
				"send": {
					"method": "POST",
					"content": {
						"this": "is",
						"a": "test"
					}
				}
			},
			{
				"send": {
					"method": "DELETE"
				}
			}
		]
	},
	"test_supportedmethods": {
		"name": "Supported only methods",
		"description": "Supported only methods",
		"type": "multicompare",
		"tests": [
			{
				"send": {
					"method": "GET"
				},
				"receive": {
					"status": 405
				}
			},
			{
				"send": {
					"method": "PUT"
				},
				"receive": {
					"status": 405
				}
			},
			{
				"send": {
					"method": "POST"
				},
				"receive": {
					"status": 405
				}
			},
			{
				"send": {
					"method": "DELETE"
				},
				"receive": {
					"status": 200
				}
			}
		]
	},
	"test_anymethod": {
		"name": "Responses to any method (wildcard)",
		"description": "Responses to any method (wildcard)",
		"type": "multicompare",
		"tests": [
			{
				"send": {
					"method": "GET"
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "contain",
							"content": "GET"
						}
					]
				}
			},
			{
				"send": {
					"method": "PUT"
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "contain",
							"content": "PUT"
						}
					]
				}
			},
			{
				"send": {
					"method": "POST"
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "contain",
							"content": "POST"
						}
					]
				}
			},
			{
				"send": {
					"method": "DELETE"
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "contain",
							"content": "DELETE"
						}
					]
				}
			},
			{
				"send": {
					"method": "OPTION"
				},
				"receive": {
					"status": 405,
					"response": [
						{
							"rule": "contain",
							"content": "Allow"
						}
					]
				}
			}
		]
	},
	"test_nocontent": {
		"name": "No content replies",
		"description": "No content replies",
		"type": "multicompare",
		"tests": [
			{
				"send": {
					"method": "GET"
				},
				"receive": {
					"status": 204
				}
			},
			{
				"send": {
					"method": "PUT"
				},
				"receive": {
					"status": 202
				}
			},
			{
				"send": {
					"method": "POST"
				},
				"receive": {
					"status": 204
				}
			},
			{
				"send": {
					"method": "DELETE"
				},
				"receive": {
					"status": 204
				}
			}
		]
	},
	"test_expected": {
		"name": "Expected values",
		"description": "This test should end in success or failure depending on provided attributes/parameters",
		"type": "multicompare",
		"tests": [
			{
				"send": {
					"method": "GET"
				},
				"receive": {
					"status": 400,
					"response": [
						{
							"rule": "match",
							"content": "Conversation error"
						}
					]
				}
			},
			{
				"send": {
					"method": "GET",
					"content": {"foo": "is", "bar" :"test"}
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "match",
							"content": "Intresting conversation using GET"
						}
					]
				}
			},
			{
				"send": {
					"method": "POST"
				},
				"receive": {
					"status": 400,
					"response": [
						{
							"rule": "match",
							"content": "Conversation error"
						}
					]
				}
			},
			{
				"send": {
					"method": "POST",
					"content": {
						"baz": "is",
						"taz": "test"
					}
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "match",
							"content": "Intresting conversation using POST"
						}
					]
				}
			}
		]
	},
	"test_liked": {
		"name": "Liked values",
		"description": "Dispatcher should match (optional) attributes and parameters but not return a conversation error",
		"type": "multicompare",
		"tests": [
			{
				"send": {
					"method": "GET"
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "match",
							"content": "Nothing to show here"
						}
					]
				}
			},
			{
				"send": {
					"method": "GET",
					"content": {"foo": "is", "bar" :"test"}
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "contain",
							"content": "foo"
						}
					]
				}
			},
			{
				"send": {
					"method": "POST"
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "match",
							"content": "Nothing to show here"
						}
					]
				}
			},
			{
				"send": {
					"method": "POST",
					"content": {
						"baz": "is",
						"taz": "test"
					}
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "contain",
							"content": "baz"
						}
					]
				}
			}
		]
	},
	"test_lotsofvalues": {
		"name": "Lots of values",
		"description": "Dispatcher should match request attributes and parameters with expected/liked values",
		"type": "multicall",
		"tests": [
			{
				"send": {
					"method": "GET",
					"content": {"exp_1" : "Lorem", "exp_2" : "ipsum", "lik_1" : "dolor", "lik_2" : "sit", "0": "amet", "1":"consectetur", "2":"adipisicing", "3":"elit", "4":"sed", "5":"do", "6":"eiusmod", "7":"tempor", "8":"incididunt", "9":"ut", "10":"labore", "11":"et", "12":"dolore", "13":"magna", "14":"aliqua"}
				}
			},
			{
				"send": {
					"method": "POST",
					"content": { 
						"Lorem": "ipsum",
						"dolor": "sit",
						"amet": "consectetur",
						"adipisicing": "elit",
						"sed": "do",
						"eiusmod": "tempor",
						"incididunt": "ut", 
						"labore": "et",
						"dolore": "magna aliqua"
					}
				}
			}
		]
	},
	"test_rawparameters": {
		"name": "Raw parameters",
		"description": "Get raw parameters from POST",
		"type": "call",
		"send": {
			"method": "POST",
			"content": {
				"this": "is",
				"a": "test"
			}
		}
	},
	"test_exception": {
		"name": "Dispatcher Exception",
		"description": "Dispatcher Exception with 400 error code",
		"type": "compare",
		"send": {
			"method": "GET"
		},
		"receive": {
			"status": 400
		}
	},
	"test_headerinject": {
		"name": "Header inject",
		"description": "Header inject",
		"type": "compare",
		"send": {
			"method": "GET"
		},
		"receive": {
			"status": 200,
			"headers": [
				{
					"header": "C-Inject-Setup",
					"value": "foo"
				},{
					"header": "C-Inject-Get",
					"value": "boo"
				},{
					"header": "C-Inject-Router",
					"value": "koo"
				}
			]
		}
	},
	"test_route_first": {
		"name": "Conditional routing (header)",
		"description": "This test should produce a different output (due to different route target) injected by a conditional route on request header",
		"type": "multicompare",
		"tests": [
			{
				"send": {
					"method": "GET"
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "contain",
							"content": "FIRST"
						}
					]
				}
			},
			{
				"send": {
					"method": "GET",
					"headers": {
						"C-Conditional-Route": true
					}
				},
				"receive": {
					"status": 200,
					"response": [
						{
							"rule": "contain",
							"content": "SECOND"
						}
					]
				}
			}
		]
	},
	"test_addattribute": {
		"name": "Router-side attribute inject",
		"description": "Router-side attribute inject",
		"type": "call",
		"send": {
			"method": "GET"
		}
	},
	"test_notexistentroute": {
		"name": "Custom 404",
		"description": "Call a not existent service to generate a 404 error",
		"type": "compare",
		"send": {
			"method": "GET"
		},
		"receive": {
			"status": 404,
			"response": [
				{
					"rule": "contain",
					"content": "404"
				}
			]
		}
	},
	"test_multi_redirect": {
		"name": "Test multiple redirect",
		"description": "Content should be loaded after 4 different redirects (301, 302, 303, 307).<br>PLEASE NOTE: this test will not work if dispatcher in STANDARD mode",
		"type": "call",
		"send": {
			"method": "GET"
		}
	},
	"test_httprequest": {
		"name": "PLUGIN - httprequest",
		"description": "Test plugin httprequest asking google maps to find the Colosseum (JSON)",
		"type": "call",
		"send": {
			"method": "GET"
		}
	},
	"test_route_second": {
		"name": "Test Autoroute",
		"description": "Route to a not-defined service. THIS WILL WORK ONLY IF autoroute is enabled AND service 'test_route_second.php' is in the default service folder.",
		"type": "call",
		"send": {
			"method": "GET"
		}
	},
	"test_performance": {
		"name": "Dispatcher performance",
		"description": "Dispatcher performance",
		"type": "performance",
		"times": 10,
		"delay": 500,
		"send": {}
	},
	"test_cache": {
		"name": "Dispatcher server cache",
		"description": "Call special service test_cache that sleeps for 2 seconds and is configured (routing-side) with cache and a TTL=3sec. Dispatcher should report exec-time and total-time lower in 8 of 10 tests (when cache is still valid).",
		"type": "performance",
		"times": 10,
		"delay": 500,
		"send": {}
	}
}